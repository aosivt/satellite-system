package org.satellite.system.services

import org.apache.spark.internal.Logging
import org.apache.spark.network.util.JavaUtils
import org.apache.spark.sql.streaming.DataStreamReader
import org.apache.spark.sql.{DataFrame, Dataset, Row, SparkSession}
import org.apache.spark.sql.functions.{explode, split}
import org.apache.spark.storage.StorageLevel
import org.apache.spark.streaming.{Seconds, StreamingContext}
import org.apache.spark.streaming.receiver.Receiver
import org.satellite.system.core.Application

import java.io.{BufferedInputStream, BufferedOutputStream, BufferedReader, DataOutputStream, IOException, InputStream, InputStreamReader, OutputStream, PrintStream}
import java.net.{ServerSocket, Socket, SocketException, SocketImpl, SocksSocketImpl}
import java.nio.charset.StandardCharsets

class SparkSocketService()(implicit spark: SparkSession) {


  def initSocket(): Unit = {
    val ssc = new StreamingContext(spark.sparkContext, Seconds(1))
    // Create an input stream with the custom receiver on target ip:port and count the
    // words in input stream of \n delimited text (eg. generated by 'nc')
    val lines = ssc.receiverStream(new CustomReceiver("0.0.0.0", 19999))
    val words = lines.flatMap(_.split(" "))
    val wordCounts = words.map(x => (x, 1)).reduceByKey(_ + _)
    wordCounts.print()
    ssc.start()
    ssc.awaitTermination()
  }

  class CustomReceiver(host: String, port: Int)
    extends Receiver[String](StorageLevel.MEMORY_AND_DISK_2) with Logging {

    def onStart(): Unit = {
      // Start the thread that receives data over a connection
      new Thread("Socket Receiver") {
        override def run(): Unit = {
          receive()
        }
      }.start()
    }

    def onStop(): Unit = {
      // There is nothing much to do as the thread calling receive()
      // is designed to stop by itself isStopped() returns false
    }

    /** Create a socket connection and receive data until receiver is stopped */
    private def receive(): Unit = {
      var socket: Socket = null
      var userInput: String = null
      try {
        logInfo("Connecting to " + host + ":" + port)
        socket = new Socket(host, port)
        logInfo("Connected to " + host + ":" + port)
        val reader = new BufferedReader(
          new InputStreamReader(socket.getInputStream, StandardCharsets.UTF_8))
        userInput = reader.readLine()
        while (!isStopped && userInput != null) {
          store(userInput)
          userInput = reader.readLine()
        }
        reader.close()
        socket.close()
        logInfo("Stopped receiving")
        restart("Trying to connect again")
      } catch {
        case e: java.net.ConnectException =>
          restart("Error connecting to " + host + ":" + port, e)
        case t: Throwable =>
          restart("Error receiving data", t)
      }
    }
  }
}